# /etc/nginx/nginx.conf
# Load the ModSecurity Nginx module
load_module modules/ngx_http_modsecurity_module.so;

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    #tcp_nopush     on;

    keepalive_timeout 65;

    #gzip  on;

    # --- ModSecurity Configuration ---
    modsecurity on; # Global enable for HTTP context
    modsecurity_rules_file /etc/nginx/modsec/modsecurity.conf; # Main ModSecurity config

    server {
    # Redirect HTTP to HTTPS
    listen 80;
    listen [::]:80 ;
    server_name localhost;
    return 301 https://$host$request_uri;

    }


    server {


        listen 443 ssl http2;
        server_name localhost;

        # Enable ModSecurity for this server block
        # modsecurity on; # Can also be enabled per server or location block




        # path on the server where the SSL certificate and key are stored
        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        location / {
            # Enable ModSecurity for this location (overrides server block if off there)

            modsecurity on;
            # If you have custom exclusion rules, include them here or in modsecurity.conf
            # For example, custom rules for a specific URL might go in
            # modsecurity_rules_file /etc/nginx/modsec/custom_modsec_rules/00_custom_rules.conf;


            proxy_pass http://app:5000; # Assuming your Flask app is in a service named 'flask_app' on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: Add error pages or other Nginx settings
    }
}