# Start from a base Nginx image (e.g., stable-alpine for smaller size)
FROM nginx:1.24.0-alpine

# Arguments to specify ModSecurity and CRS versions
ARG MODSECURITY_VERSION=3.0.10
ARG NGINX_MODSECURITY_VERSION=1.0.3
ARG CRS_VERSION=3.3.4 # Use a specific CRS version, adjust as needed

# Install build dependencies
RUN apk add --no-cache \
    alpine-sdk \
    automake \
    autoconf \
    libtool \
    git \
    pcre-dev \
    libxml2-dev \
    json-c-dev \
    ssdeep-dev \
    openssl-dev \
    zlib-dev \
    make \
    gcc \
    g++ \
    linux-headers \
    curl \
    libc-dev \
    # For ModSecurity-nginx connector
    pcre \
    zlib \
    libxml2 \
    json-c \
    ssdeep \
    openssl

# --- Build ModSecurity library ---
WORKDIR /usr/local/src
RUN git clone --depth 1 -b v${MODSECURITY_VERSION} https://github.com/SpiderLabs/ModSecurity /usr/local/src/ModSecurity \
    && cd ModSecurity \
    && git submodule init \
    && git submodule update \
    && ./build.sh \
    && ./configure \
    && make -j$(nproc) \
    && make install

# --- Build ModSecurity-nginx connector ---
WORKDIR /usr/local/src
RUN git clone --depth 1 -b v${NGINX_MODSECURITY_VERSION} https://github.com/SpiderLabs/ModSecurity-nginx /usr/local/src/ModSecurity-nginx

# --- Compile Nginx with ModSecurity module ---
# Get the Nginx source code from the same version as the base image
RUN NGINX_VERSION=$(nginx -v 2>&1 | grep -oP 'nginx/\K[0-9.]+') \
    && curl -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar -xz -C /usr/local/src \
    && cd /usr/local/src/nginx-${NGINX_VERSION} \
    && ./configure --with-compat --add-dynamic-module=/usr/local/src/ModSecurity-nginx \
    && make modules \
    && cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules/

# --- Configure ModSecurity and OWASP CRS ---
RUN mkdir -p /etc/nginx/modsec
# Copy recommended config files
RUN cp /usr/local/modsecurity/etc/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf \
    && cp /usr/local/modsecurity/etc/unicode.mapping /etc/nginx/modsec/

# Download and set up OWASP CRS
WORKDIR /etc/nginx/modsec
RUN git clone https://github.com/OWASP/crs.git /etc/nginx/modsec/crs \
    && cp crs/crs-setup.conf.example crs/crs-setup.conf \
    # Create the exclusion file from example, you'll put your rules here
    && touch crs/rules/REQUEST-900-EXCLUSION-RULES-LFI.conf \
    # Move other example rules if needed for your setup (e.g. 900-EXCLUSION-RULES-LFI)
    # Be explicit if you need to modify or enable other example rules in CRS
    # && cp crs/rules/REQUEST-900-EXCLUSION-RULES-LFI.conf.example crs/rules/REQUEST-900-EXCLUSION-RULES-LFI.conf
    # && cp crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
    # ...

# Adjust ModSecurity config: enable engine, include CRS rules
RUN sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/SecAuditLogParts ABCFH/SecAuditLogParts ABCFHZ/' /etc/nginx/modsec/modsecurity.conf \
    && echo "Include /etc/nginx/modsec/crs/crs-setup.conf" >> /etc/nginx/modsec/modsecurity.conf \
    && echo "Include /etc/nginx/modsec/crs/rules/*.conf" >> /etc/nginx/modsec/modsecurity.conf \
    && echo "SecAuditLog /var/log/nginx/modsec_audit.log" >> /etc/nginx/modsec/modsecurity.conf \
    && echo "SecDebugLog /var/log/nginx/modsec_debug.log" >> /etc/nginx/modsec/modsecurity.conf \
    && echo "SecDebugLogLevel 0" >> /etc/nginx/modsec/modsecurity.conf # Set to 9 for heavy debugging

# --- Final Nginx Configuration ---
# Copy your Nginx config that loads the ModSecurity module and turns it on
COPY nginx.conf /etc/nginx/nginx.conf

# Clean up build dependencies
RUN apk del alpine-sdk automake autoconf libtool git \
    pcre-dev libxml2-dev json-c-dev ssdeep-dev openssl-dev zlib-dev \
    make gcc g++ linux-headers curl libc-dev

# Ensure logs are accessible for Docker logging
RUN touch /var/log/nginx/access.log \
    && touch /var/log/nginx/error.log \
    && touch /var/log/nginx/modsec_audit.log \
    && touch /var/log/nginx/modsec_debug.log \
    && chmod 644 /var/log/nginx/*.log

# Expose ports (adjust as needed)
EXPOSE 80 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]