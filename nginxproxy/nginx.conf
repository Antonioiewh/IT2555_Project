# /etc/nginx/nginx.conf
# Load the ModSecurity Nginx module
load_module modules/ngx_http_modsecurity_module.so;

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {

    # rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=3r/s;
    # limit no. of ip connections
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;


    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    #tcp_nopush     on;

    keepalive_timeout 65;

    # --- ModSecurity Configuration ---
    modsecurity on; # Global enable for HTTP context
    modsecurity_rules_file /etc/nginx/modsec/modsecurity.conf; # Main ModSecurity config

    server {
    # Redirect HTTP to HTTPS
    listen 80;
    listen [::]:80 ;
    server_name localhost;
    #keep this commented so i can test firewall works
    #return 301 https://$host$request_uri; # Redirect all HTTP traffic to HTTPS

        # Serve content for HTTP requests
        location / {
            proxy_pass http://app:5000; # Assuming your app is running on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    }


    server {

        listen 443 ssl http2;
        server_name localhost;


        # == START OF SECURITY STUFF ==


    

        # hide server version
        server_tokens off;

        # custom headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;" always;
        
        # prevents clickjacking
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        #Referrer policy
        add_header Referrer-Policy "no-referrer, strict-origin-when-cross-origin";

        # XSS protection header
        add_header X-XSS-Protection "1; mode=block";

        # Disable caching for sensitive data
        add_header Cache-Control 'no-store, no-cache';

        # SSL configuration
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1.2 TLSv1.3;
        # path on the server where the SSL certificate and key are stored
        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;


        # == END OF SECURITY STUFF ==

        # Redirect on rate limit
        error_page 429 = /rate_limit.html;

        # Redirect 403 errors to the custom page
        error_page 403 /403_error.html;
        # serve custom rate limit page
        location = /rate_limit.html {
            root /usr/share/nginx/html;
            internal;
        }


        location / {
            
            limit_req zone=api_limit burst=3 nodelay;
            limit_req_status 429;
            limit_conn conn_limit 10; # Limit to 10 connections per IP
            proxy_pass http://app:5000; # Assuming your Flask app is in a service named 'flask_app' on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        

        # Serve the custom 403 page
        location = /403.html {
            root /usr/share/nginx/html; # Path to the directory containing 403.html
            internal; # Prevent direct access to the error page
        }
        
        

    }
}